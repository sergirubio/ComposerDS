#	"$Name: not supported by cvs2svn $";
#	"$Header: /users/chaize/newsvn/cvsroot/Calculation/PyStateComposer/src/PyStateComposer.py,v 1.1.1.1 2007-10-17 16:42:52 sergi_rubio Exp $";
#=============================================================================
#
# file :        PyStateComposer.py
#
# description : Python source for the PyStateComposer and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                PyStateComposer are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author: sergi_rubio $
#
# $Revision: 1.1.1.1 $
#
# $Log: not supported by cvs2svn $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import os

#==================================================================
#   PyStateComposer Class Description:
#
#
#==================================================================


class PyStateComposer(PyTango.Device_3Impl):

#--------- Add you global variables here --------------------------
	TangoStates = ['ON','OFF','CLOSE','OPEN','INSERT','EXTRACT','MOVING','STANDBY','FAULT','INIT','RUNNING','ALARM','DISABLE','UNKNOWN']
	
	class TDev:
		def __init__(self,name):
			self.name=name
			self.event_id=None
			self.dp=None
			self.State=PyTango.DevState.UNKNOWN
		def __str__(self):
			return str(name)+","+str(self.event_id)+","+TangoStates[self.State]+";"

	def evaluateStates(self):
		print 'in ',self.get_name(),'.evaluateStates()'
		try:
			status = 'DevicesList:\n'
			if not len(self.Devices):
				self.set_state(PyTango.DevState.UNKNOWN)
				return
			result = self.Devices.values()[0].State #self.get_state()
			for d in self.Devices.values():
				if self.StatePriorities[self.TangoStates[int(d.State)]]>self.StatePriorities[self.TangoStates[int(result)]]:
					print self.get_name(),': evaluating ',d.name,'; Priority of ',self.TangoStates[d.State],',',d.State,' is higher than ',self.TangoStates[result],',',result,'; STATE CHANGES!'
					result=d.State
				status = status + d.name + ':\t' + self.TangoStates[d.State] + '\n'
			if result != self.get_state():
				print self.get_name(),'.State changed! ',self.get_state(),'->',result
				self.set_state(result)
				self.push_change_event('State')
			status = 'The PyStateComposer is in ' + self.TangoStates[self.get_state()] + ' State.\n' + status
			self.set_status(status)
		except Exception,e:
			print 'Exception in evaluateStates()',str(e)

	def push_event(self,event):
		print 'in push event'
		try:
			print "in ",self.get_name(),".push_event(",event.device,".",event.attr_name,"=",event.attr_value.value,")"
			if not event.err:
				print "Event: ",event.attr_name, event.attr_value.value
				self.Devices[event.device.lower()].State=event.attr_value.value
				self.evaluateStates()
			else:
				print event.errors
		except Exception,e:
			print 'exception in push_event(): ',e, ";", sys.exc_info()[0]

	def addManager(self):
		self.Manager = PyTango.DeviceProxy(self.PyStateManager)
		cb = self.PyStateCallback()
		self.subscribe_event('State',PyTango.EventType.CHANGE,cb,[])
		self.set_change_event('State',True,True)


#------------------------------------------------------------------
#	Device constructor
#------------------------------------------------------------------
	def __init__(self,cl, name):
		PyTango.Device_3Impl.__init__(self,cl,name)
		PyStateComposer.init_device(self)

#------------------------------------------------------------------
#	Device destructor
#------------------------------------------------------------------
	def delete_device(self):
		print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#	Device initialization
#------------------------------------------------------------------
	def init_device(self):
		print "In ", self.get_name(), "::init_device()"
		self.set_state(PyTango.DevState.ON)
		self.get_device_properties(self.get_device_class())
		
		print self.get_name(),": ",		" ... parsing properties ... "
		self.StatePriorities = { 
			'ON':0, 
			'OFF':11, 
			'CLOSE':10, 
			'OPEN':0, 
			'INSERT':10, 
			'EXTRACT':0, 
			'MOVING':8, 
			'STANDBY':0, 
			'FAULT':13, 
			'INIT':7, 
			'RUNNING':8, 
			'ALARM':12, 
			'DISABLE':11, 
			'UNKNOWN':14 
			}
		if len(self.PyStateManager):
			##Ok, we will use that PyStateManager
			pass
		else:
			##Get the manager name from instance
			try:
				manlist = PyTango.Util.instance().get_device_list_by_class('PyStateManager')
				self.PyStateManager=manlist.at(0).get_name()
			except:
				self.PyStateManager='nada'
			pass #raise RuntimeError, str('SerialLine property requires a value!')
		print self.get_name(),": ",'PyStateManager set to: ',self.PyStateManager
		
		self.Manager = None	
		self.Devices = {} ##This List will store the name of devices, ID's of all subscribed events and states; using TDev class

		if len(self.DevicesList):
			for device in self.DevicesList:
				self.AddDevice(device)
			pass
		else:
			self.DevicesList=['sys/database/2']
			pass #raise RuntimeError, str('SerialLine property requires a value!')
		
		if len(self.AlwaysExecutedHook):
			pass
		else:
			"""
			maillist='srubio@cells.es'
			try: is self.prevStates is not None: pass
			except: self.prevStates = None
			if self.prevStates is not None and not len(self.prevStates)==len(self.Devices):
				report = ''
				for i in range(len(self.prevStates)):
					if self.prevStates[i]!=self.Devices.values()[i]:
						dp = PyTango.DeviceProxy(self.Devices.keys()[i])
						report = report+'Device '+self.Devices.keys()[i]+' State has changed!\n'
						report = report+self.TangoStates[self.prevStates[i]]+'->'+self.TangoStates[self.Devices.values()[i]]+'\n'
						report = report+'Actual Status:'+'\n'+dp.command_inout('Status')+'\n'+'\n'
					if len(report):
						report = 'echo "'+report+'" | mail -s "ivacuum01 Status Report" '+maillist
						os.system(report)
			self.prevStates = self.Devices.values()
			"""
			self.AlwaysExecutedHook=['pass']
		
		##Two Objects used to manage States; StatePriorities is the dictinary used and StatePolicy is its string representation (Tango Property)
		if len(self.StatePolicy):
			separators = ":=, "
			tokens=[]
			for line in self.StatePolicy:
				for s in separators:
					part=line.split(str(s))
					if len(part)<2: 
						continue
					if part[1]!=None:
						self.StatePriorities[part[0]]=part[1]
						break
		else:
			pass #raise RuntimeError, str('SerialLine property requires a value!')
		self.StatePolicy = []
		for i in range(len(self.StatePriorities)):
			k = self.StatePriorities.keys()[i]
			self.StatePolicy.append(str(k)+","+str(self.StatePriorities[k]))	
		print self.get_name(),": ",'StatePolicy set to: ',str(self.StatePolicy)
		PyTango.DeviceProxy(self.get_name()).put_property({
			'StatePolicy':self.StatePolicy, \
			'DevicesList':self.DevicesList, \
			'AttributeName':self.AttributeName, \
			'AlwaysExecutedHook':self.AlwaysExecutedHook, \
			})
		self.set_change_event('State',True,True)


#------------------------------------------------------------------
#	Always excuted hook method
#------------------------------------------------------------------
	def always_executed_hook(self):
		print "In ", self.get_name(), "::always_executed_hook()"
		#This lines allow to use the AlwaysExecutedHook property to add custom code to the Device
		if len(self.AlwaysExecutedHook) > 0:
			code = ''
			for l in self.AlwaysExecutedHook:
				code = code+l+'\n'
			try:
				exec code
			except Exception,e:
				print 'Exception in Custom AlwaysExecutedHook: ',str(e)


#==================================================================
#
#	PyStateComposer read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#	Read Attribute Hardware
#------------------------------------------------------------------
	def read_attr_hardware(self,data):
		print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#	Read StateAttribute attribute
#------------------------------------------------------------------
	def read_StateAttribute(self, attr):
		print "In ", self.get_name(), "::read_StateAttribute()"
		
		#	Add your own code here
		
		attr_StateAttribute_read = 1
		attr.set_value(attr_StateAttribute_read)


#------------------------------------------------------------------
#	Read AttributeValue attribute
#------------------------------------------------------------------
	def read_AttributeValue(self, attr):
		print "In ", self.get_name(), "::read_AttributeValue()"
		
		#	Add your own code here
		
		attr_AttributeValue_read = "Hello Tango world"
		attr.set_value(attr_AttributeValue_read)


#------------------------------------------------------------------
#	Read StatesSpectrum attribute
#------------------------------------------------------------------
	def read_StatesSpectrum(self, attr):
		print "In ", self.get_name(), "::read_StatesSpectrum()"
		
		#	Add your own code here
		
		attr_StatesSpectrum_read = []
		for d in self.Devices.values(): attr_StatesSpectrum_read.append(str(d.State))
		attr.set_value(attr_StatesSpectrum_read, len(self.Devices))


#------------------------------------------------------------------
#	Read AttributesList attribute
#------------------------------------------------------------------
	def read_AttributesList(self, attr):
		print "In ", self.get_name(), "::read_AttributesList()"
		
		#	Add your own code here
		
		attr_AttributesList_read = ["Hello Tango world"]
		attr.set_value(attr_AttributesList_read, 1)


#------------------------------------------------------------------
#	Write AttributesList attribute
#------------------------------------------------------------------
	def write_AttributesList(self, attr):
		print "In ", self.get_name(), "::write_AttributesList()"
		data=[]
		attr.get_write_value(data)
		print "Attribute value = ", data

		#	Add your own code here


#------------------------------------------------------------------
#	Read AttributesValues attribute
#------------------------------------------------------------------
	def read_AttributesValues(self, attr):
		print "In ", self.get_name(), "::read_AttributesValues()"
		
		#	Add your own code here
		
		attr_AttributesValues_read = ["Hello Tango world"]
		attr.set_value(attr_AttributesValues_read, 1)


#------------------------------------------------------------------
#	Read DevicesList attribute
#------------------------------------------------------------------
	def read_DevicesList(self, attr):
		print "In ", self.get_name(), "::read_DevicesList()"
		
		#	Add your own code here
		
		attr_DevicesList_read = []
		for d in self.Devices.values(): attr_DevicesList_read.append(d.name)
		attr.set_value(attr_DevicesList_read, len(self.Devices))


#==================================================================
#
#	PyStateComposer command methods
#
#==================================================================

#------------------------------------------------------------------
#	AddDevice command:
#
#	Description: 
#	argin:  DevString	Device to add to the composing
#------------------------------------------------------------------
	def AddDevice(self, argin):
		print "In ", self.get_name(), "::AddDevice("+argin+")"
		#	Add your own code here
		
#		if not self.Manager: addManager()
#		self.Manager.command_inout('addDeviceToList',str(argin))
		#dev = PyTango.DeviceProxy(self.PyStateManager)
		try:
			if '*' in argin or '?' in argin:
				devs = PyTango.Database().get_device_exported(argin)
				for d in devs:
					self.AddDevice(d)
			else:
				argin = argin.lower()
				if not argin in self.Devices.keys() and not argin==self.get_name().lower():
					dev = PyTango.DeviceProxy(argin)
					if not dev.is_attribute_polled('State'):
						print self.get_name(),'.AddDevice(): forcing State polling to ',argin
						period = dev.get_attribute_poll_period('State') or 3000
						dev.poll_attribute('State',period)
						print argin,".poll_attribute('State',",period,")"
					cb = self 
					if not argin in self.Devices.keys(): 
						self.Devices[argin] = self.TDev(argin)
					print 'subscribing event'
					event_id = dev.subscribe_event('State',PyTango.EventType.CHANGE,cb,[])
					self.Devices[argin].dp = dev
					self.Devices[argin].event_id = event_id
					print self.get_name(),".Devices:",str(self.Devices)
					self.evaluateStates()
				else:
					print "In ", self.get_name(), "::AddDevice()", ": This device is already in the list."
		except Exception,e:
				print 'Exception in AddDevice(): ',str(e)


#------------------------------------------------------------------
#	RemoveDevice command:
#
#	Description: 
#	argin:  DevString	Device to remove
#------------------------------------------------------------------
	def RemoveDevice(self, argin):
		print "In ", self.get_name(), "::RemoveDevice()"
		#	Add your own code here
		if '*' in argin or '?' in argin:
			devs = PyTango.Database().get_device_exported(argin)
			for d in devs:
				self.RemoveDevice(d)
		elif argin in self.Devices.keys():
			argin = argin.lower()
			self.Devices[argin].dp.unsubscribe_event(self.Devices[argin].event_id)
			self.Devices.pop(argin)
			print "\t",self.get_name(),"::RemoveDevice(",argin,"): device unsuscribed and removed from list!"
			self.evaluateStates()


#==================================================================
#
#	PyStateComposerClass class definition
#
#==================================================================
class PyStateComposerClass(PyTango.PyDeviceClass):

	#	Class Properties
	class_property_list = {
		}


	#	Device Properties
	device_property_list = {
		'PyStateManager':
			[PyTango.DevString,
			"Manager assigned to this Composer",
			[] ],
		'AttributeName':
			[PyTango.DevString,
			"Global Attribute",
			[] ],
		'DevicesList':
			[PyTango.DevVarStringArray,
			"A list of regular expressions ...",
			[] ],
		'StatePolicy':
			[PyTango.DevVarStringArray,
			"",
			[] ],
		'AlwaysExecutedHook':
			[PyTango.DevVarStringArray,
			"Python Code to be executed before each command execution",
			[] ],
		}


	#	Command definitions
	cmd_list = {
		'AddDevice':
			[[PyTango.DevString, "Device to add to the composing"],
			[PyTango.DevVoid, ""]],
		'RemoveDevice':
			[[PyTango.DevString, "Device to remove"],
			[PyTango.DevVoid, ""]],
		}


	#	Attribute definitions
	attr_list = {
		'StateAttribute':
			[[PyTango.DevString,
			PyTango.SCALAR,
			PyTango.READ]],
		'AttributeValue':
			[[PyTango.DevString,
			PyTango.SCALAR,
			PyTango.READ]],
		'StatesSpectrum':
			[[PyTango.DevString,
			PyTango.SPECTRUM,
			PyTango.READ, 256]],
		'AttributesList':
			[[PyTango.DevString,
			PyTango.SPECTRUM,
			PyTango.READ_WRITE, 256]],
		'AttributesValues':
			[[PyTango.DevString,
			PyTango.SPECTRUM,
			PyTango.READ, 256]],
		'DevicesList':
			[[PyTango.DevString,
			PyTango.SPECTRUM,
			PyTango.READ, 256],
			{
				'description':"Devices actually subscribed",
			} ],
		}


#------------------------------------------------------------------
#	PyStateComposerClass Constructor
#------------------------------------------------------------------
	def __init__(self, name):
		PyTango.PyDeviceClass.__init__(self, name)
		self.set_type(name);
		print "In PyStateComposerClass  constructor"

#==================================================================
#
#	PyStateComposer class main method
#
#==================================================================
if __name__ == '__main__':
	try:
		py = PyTango.PyUtil(sys.argv)
		py.add_TgClass(PyStateComposerClass,PyStateComposer,'PyStateComposer')

		U = PyTango.Util.instance()
		U.server_init()
		U.server_run()

	except PyTango.DevFailed,e:
		print '-------> Received a DevFailed exception:',e
	except Exception,e:
		print' an unforeseen exception occured: ',str(e)